// Category Theory DSL Grammar (Lark syntax)
// Based on EBNF from CT_DSL_RESEARCH_SYNTHESIS.md
// Extended with Hindley-Milner type annotations (Phase 2)
//
// Clean Architecture: Adapter layer (external Lark dependency)
// SOLID: SRP - only defines grammar, no parsing logic

?start: program

program: _NEWLINE* statement (_sep statement)* _sep? _NEWLINE*
       | _NEWLINE*

_sep: ";" _NEWLINE* | _NEWLINE+

?statement: type_annotation
          | definition
          | expression

// Type annotations: name :: Type -> Type (Haskell-style)
type_annotation: IDENTIFIER TYPE_ANNOTATION type_expr

// Functor definitions (optionally preceded by type annotation)
definition: "functor" IDENTIFIER "=" expression

?expression: term
           | expression COMPOSE expression    -> composition
           | expression BIND expression       -> bind_expr
           | expression PRODUCT expression    -> product_expr

?term: IDENTIFIER                           -> identifier
     | LITERAL                              -> literal
     | "(" expression ")"

// Type expressions (Hindley-Milner type syntax)
?type_expr: function_type
          | atomic_type

// Function types: A -> B -> C (right associative)
function_type: atomic_type ARROW type_expr

// Product types: A × B (for parallel composition)
product_type: atomic_type TYPE_PRODUCT_OP atomic_type

// Atomic types (highest precedence)
?atomic_type: monomorphic_type
            | type_variable
            | type_constructor
            | unit_type
            | product_type
            | "(" type_expr ")"

// Unit type: () (empty/void type)
unit_type: "(" ")"

// Monomorphic types: Int, String, Bool, etc.
monomorphic_type: TYPE_NAME

// Type variables: a, b, c (for polymorphism)
type_variable: TYPE_VAR

// Type constructors: List[T], Dict[K, V]
type_constructor: TYPE_NAME "[" type_params "]"

type_params: type_expr ("," type_expr)*

// Terminals for type system
TYPE_ANNOTATION: "::"
ARROW: "->" | "→"
TYPE_PRODUCT_OP: "×" | "*"
TYPE_NAME: /[A-Z][a-zA-Z0-9_]*/         // Capitalized (Int, String, List)
TYPE_VAR: /[a-z]/                        // Single lowercase letter (a, b, c)

// Terminals for expressions
COMPOSE: "∘" | "o"                          // Allow ASCII alternative
BIND: ">>=" | ">>"                          // Monadic bind
PRODUCT: "×" | "*"                          // Allow ASCII alternative

IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/
LITERAL: /"[^"]*"/ | /'[^']*'/              // Double or single quoted strings

// Whitespace and comments
%import common.NEWLINE -> _NEWLINE
%import common.WS_INLINE
%ignore WS_INLINE

COMMENT: "#" /[^\n]*/
%ignore COMMENT
